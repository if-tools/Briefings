@page "/"

@namespace IFToolsBriefings.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>IF-Tools Briefings</title>
    <base href="~/"/>
    
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css"/>
    <link href="css/site.css" rel="stylesheet"/>
    <link href="css/shared.css" rel="stylesheet"/>
    <link href="IF-Tools Briefings.styles.css" rel="stylesheet"/>
    
    <link href="https://fonts.cdnfonts.com/css/roboto" rel="stylesheet">
    
    <!-- Feather Icons font -->
    <link rel="stylesheet" type="text/css" href="https://at.alicdn.com/t/font_o5hd5vvqpoqiwwmi.css">
</head>
<body>

<div id="components-reconnect-modal" class="reconnect-modal hide">
    <div class="reconnect-modal-dialog">
        <div class="modal-body">
            <div class="state state-reconnecting hide">
                <p>
                    Reconnecting to server...
                </p>
                <button class="btn btn-primary" onclick="location.reload()">Reload page</button>
            </div>
            <div class="state state-lost hide">
                <p>
                    Lost connection to server.
                </p>
                <button class="btn btn-primary" onclick="location.reload()">Reload</button>
            </div>
            <div class="state state-refused hide">
                <p>
                    Connection refused.
                </p>
                <button class="btn btn-primary" onclick="location.reload()">Reload</button>
            </div>
        </div>
    </div>
</div>

<component type="typeof(App)" render-mode="ServerPrerendered"/>

<div id="blazor-error-ui">
    <environment include="Staging,Production">
        An error has occurred. This application may no longer respond until reloaded.
    </environment>
    <environment include="Development">
        An unhandled exception has occurred. See browser dev tools for details.
    </environment>
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

<script src="_framework/blazor.server.js" autostart="false"></script>
<script src="js/navMenu.js"></script>

<script>
    let clock;
    
    function startTime() {
        let date = new Date();
        
        let element = document.querySelector(".current-time");
        
        if (element === null || element.innerHTML === null) return;
        
        element.innerHTML = date.getUTCHours() + ":" + date.getUTCMinutes() + ":" + date.getUTCSeconds() + " UTC";
        clock = setTimeout(startTime.bind(null, element), 1000);
    }
    
    function stopTime() {
        clearTimeout(clock);
    }
</script>

<script src="js/jquery-3.6.0.min.js"></script>
<script src="js/magnificPopup.min.js"></script>

<!-- FilePond scripts -->
<script src="js/filepond/filepond-plugin-file-encode.min.js"></script>
<script src="js/filepond/filepond-plugin-file-validate-size.min.js"></script>
<script src="js/filepond/filepond-plugin-file-validate-type.js"></script>
<script src="js/filepond/filepond-plugin-image-exif-orientation.min.js"></script>
<script src="js/filepond/filepond-plugin-image-preview.min.js"></script>
<script src="js/filepond/filepond.min.js"></script>

<script>
    FilePond.registerPlugin(
        FilePondPluginFileEncode,
        FilePondPluginFileValidateSize,
        FilePondPluginFileValidateType,
        FilePondPluginImageExifOrientation,
        FilePondPluginImagePreview
    );
    
    FilePond.setOptions({ 
        allowReorder: true,
        acceptedFileTypes: ['image/png', 'image/jpeg'],
        server: {
            url: "/api/Attachment/",
            process:(fieldName, file, metadata, load, error, progress, abort) => {
                const formData = new FormData();
                formData.append("file", file);
                
                const request = new XMLHttpRequest();
                request.open('POST', '/api/Attachment/Create');
                
                request.upload.onprogress = (e) => {
                    progress(e.lengthComputable, e.loaded, e.total);
                };
                
                request.onload = function () {
                    if (request.status >= 200 && request.status < 300) {
                        load(request.responseText);
                    }
                    else {
                        error('Error during upload.');
                    }
                };
                
                request.send(formData);
                return {
                    abort: () => {
                        request.abort();
                        abort();
                    }
                };
            },
            fetch: null,
            revert: "Revert",
            remove: "Remove",
            load: "Load?id="
        }
    });
    
</script>
<!-- End FilePond scripts -->

<script>
    let reconnectModal = document.querySelector(".reconnect-modal");
    let stateReconnecting = document.querySelector(".state-reconnecting");
    let stateLost = document.querySelector(".state-lost");
    let stateRefused = document.querySelector(".state-refused");

    // custom onConnectionDown handler
    async function connectionDown(options) {
        reconnectModal.classList.remove("hide");
        hideAllStates();
        stateReconnecting.classList.remove("hide");
        
        for (let i = 0; i < options.maxRetries; i++) {
            await this.delay(options.retryIntervalMilliseconds);
            
            if (this.isDisposed) {
                break;
            }

            try {
                const result = await window.Blazor.reconnect();
                
                if (!result) {
                    console.error("(reconnect attempt #" + i + ") Server refused.");
                } else {
                    hideAllStates();
                    reconnectModal.classList.add("hide");

                    return;
                }
            } catch { }
        }
        
        hideAllStates();
        stateLost.classList.remove("hide");
    }

    function delay(durationMilliseconds) {
        return new Promise(resolve => setTimeout(resolve, durationMilliseconds));
    }
    
    function hideAllStates() {
        stateLost.classList.add("hide");
        stateReconnecting.classList.add("hide");
        stateRefused.classList.add("hide");
    }

    // custom onConnectionUp handler
    function connectionUp(e) {
        hideAllStates();
        reconnectModal.classList.add("hide");
    }

    window.Blazor.start({
        reconnectionOptions: {
            maxRetries: 30,
            retryIntervalMilliseconds: 500,
        },
        reconnectionHandler: {
            onConnectionDown: e => connectionDown(e),
            onConnectionUp: e => connectionUp(e)
        }
    });
</script>

</body>
</html>
