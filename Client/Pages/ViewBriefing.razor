@page "/b/{BriefingId}"
@page "/b"

@using IFToolsBriefings.Client.Services
@using Newtonsoft.Json

@layout BriefingLayout;

@inject CurrentPage CurrentPage
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime

<style> .content { height: 100vh } </style>

<link href="css/magnific-popup.css" rel="stylesheet">

<AuthenticationModal @ref="_authModal" IsShown="@(!_authenticated)" IsViewPassword="@true"></AuthenticationModal>

<div class="wrapper">
    <div class="section section-title">
        <img class="logo-image" alt="logo" src="images/logos/logo.png">
    </div>
    <div class="section section-description">
        <h3 class="briefing-title">Briefing #@_actualBriefingId <a href="/b/@_actualBriefingId/edit"><span class="feather icon-edit"></span></a></h3>
        <h3 class="briefing-airports">@_displayBriefing.Origin - @_displayBriefing.Destination</h3>
        <span class="briefing-author">@(!string.IsNullOrWhiteSpace(_displayBriefing.Author) ? $"Made by {_displayBriefing.Author}" : "Anonymous")</span>
    </div>
    <div class="section section-main-info">
        <h4 class="section-title">Main Info</h4>
        <div class="main-info">
            <div class="main-info-item">
                <span class="key">Server</span>
                <span class="value">@_displayBriefing.Server</span>
            </div>
            <div class="main-info-item">
                <span class="key">Dep. RWY</span>
                <span class="value">@_displayBriefing.OriginRunway</span>
            </div>
            <div class="main-info-item">
                <span class="key">Arr. RWY</span>
                <span class="value">@_displayBriefing.DestinationRunway</span>
            </div>
            <div class="main-info-item">
                <span class="key">Flight Level</span>
                <span class="value">@("FL" + GetFlightLevelToDisplay(_displayBriefing.FlightLevel))</span>
            </div>
            <div class="main-info-item">
                <span class="key">Cruise SPD</span>
                <span class="value">@(GetCruiseSpeedToDisplay(_displayBriefing.CruiseSpeed))</span>
            </div>
            <div class="main-info-item">
                <span class="key">Time Enroute</span>
                <span class="value">@(GetTimeEnrouteString(_displayBriefing.GetTimeEnroute()))</span>
            </div>
            <div class="main-info-item">
                <span class="key">Departure Time</span>
                <span class="value">@(GetDepartureTimeString(_displayBriefing.DepartureTime) + "Z")</span>
            </div>
        </div>
    </div>
    <div class="section section-flight-plan">
        <h4 class="section-title">Flight Plan <span class="feather icon-clipboard" onclick="navigator.clipboard.writeText('@_displayBriefing.FlightPlan')"></span></h4>
        <p class="flight-plan">@_displayBriefing.FlightPlan</p>
    </div>
    @if (!string.IsNullOrWhiteSpace(_displayBriefing.Remarks))
    {
        <div class="section section-remarks">
            <h4 class="section-title">Remarks</h4>
            <p class="remarks">@((MarkupString)_displayBriefing.Remarks.Replace("\n", "<br>"))</p>
        </div>
    }
    <div class="section section-attachments">
        <h4 class="section-title">Attachments</h4>
        <div class="attachments-gallery">
            @if (_attachments.Count > 0)
            {
                @foreach (var attachment in _attachments)
                {
                    <a href="@GetPathForAttachment(attachment)" class="gallery-item">
                        <img class="attachment-preview" alt="attachment" src="@GetPathForAttachment(attachment)">
                    </a>
                }
            }
            else
            {
                <p class="no-attachments">Nothing attached.</p>
            }
        </div>
    </div>
    <div class="section section-footer">
        <span class="briefing-created-on">Created on: @(_displayBriefing.CreatedOn?.ToString("u") ?? "N/A")</span>
        <span class="briefing-last-edited">Last edited: @(_displayBriefing.LastEdited?.ToString("u") ?? "Never")</span>
    </div>
</div>

@code {

    [Parameter]
    public string BriefingId { get; set; }

    private int _actualBriefingId;

    private Briefing _displayBriefing = Briefing.Default;
    private Briefing _briefing;
    private List<FileAttachment> _attachments = new();
    
    private IJSObjectReference _generalJsModule;
    private IJSObjectReference _browserStorageJsModule;

    private AuthenticationModal _authModal;
    private bool _authenticated = true;
    
    private const string BaseAttachmentsPath = "images/attachments/";

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(BriefingId) || !int.TryParse(BriefingId, out _actualBriefingId))
        {
            NavManager.NavigateTo("/");
            
            return;
        }
        
        CurrentPage.SetCurrentPageName($"#{BriefingId} - Briefings");

        var briefingExists = await ApiService.CheckIfBriefingExists(_actualBriefingId);
        if (!briefingExists)
        {
            NavManager.NavigateTo("/");
            
            return;
        }
        
        _authenticated = await ApiService.CheckPassword(_actualBriefingId, null, "");

        if (_authenticated)
        {
            _briefing = await ApiService.GetBriefing(_actualBriefingId);
            
            _displayBriefing = _briefing;
            StateHasChanged();
            AddAttachments();
        }
        
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _authModal.Authenticate += Authenticate;
            
            _generalJsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/viewBriefing.js");
            if(_authenticated)
                await _generalJsModule.InvokeVoidAsync("initMagnificPopup");
            
            _browserStorageJsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/localStorage.js");
            await _browserStorageJsModule.InvokeVoidAsync("addViewedBriefing", _actualBriefingId);
        }
    }
    
    private async void Authenticate(string password)
    {
        if (string.IsNullOrWhiteSpace(password)) return;
        
        if (await ApiService.CheckPassword(_actualBriefingId, null, password))
        {
            _briefing = await ApiService.GetBriefing(_actualBriefingId, password);

            _authenticated = true;
            _authModal.Hide();
            _displayBriefing = _briefing;
            AddAttachments();
            
            StateHasChanged();
        }
        else
        {
            CurrentPage.ShowNotification("Wrong password.");
            return;
        }
            
        await _generalJsModule.InvokeVoidAsync("initMagnificPopup");
    }

    private string GetPathForAttachment(FileAttachment attachment)
    {
        return BaseAttachmentsPath + attachment.FileName;
    }

    private async void AddAttachments()
    {
        if (!string.IsNullOrWhiteSpace(_briefing.Attachments))
        {
            _attachments = (await ApiService.GetAttachments(JsonConvert.SerializeObject(_briefing.AttachmentsArray))).ToList();
        }
        
        StateHasChanged();
    }

    private string GetTimeEnrouteString(TimeSpan timeEnroute)
    {
        return AddZeroesIfNeeded(timeEnroute.Hours) + ":" + AddZeroesIfNeeded(timeEnroute.Minutes);
    }
    
    private string GetDepartureTimeString(DateTime depTime)
    {
        return AddZeroesIfNeeded(depTime.Hour) + ":" + AddZeroesIfNeeded(depTime.Minute);
    }
    
    private string AddZeroesIfNeeded(int number)
    {
        return number.ToString().Length == 1 ? "0" + number : number.ToString();
    }

    private string GetFlightLevelToDisplay(int flightLevel)
    {
        return $"{flightLevel:000}";
    }

    private string GetCruiseSpeedToDisplay(double cruiseSpeed)
    {
        return cruiseSpeed < 4 ? $"M{cruiseSpeed:0.00}" : $"TAS {cruiseSpeed}";
    }

}